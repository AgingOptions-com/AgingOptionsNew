package com.nspl.agingoptions.financepage.testcases;

import java.time.Duration;
import java.util.Map;

import org.testng.annotations.Test;

import com.agingoptions.finance.LifeInsurance;
import com.agingoptions.health.HealthInsurance;
import com.agingoptions.lpolandingpage.LpoLandingPage;
import com.aginoptions.legalpage.FiduciaryBeneficiaryPage;
import com.nspl.agingoptions.commoncode.AssetsCommonCode;
import com.nspl.agingoptions.commoncode.CommonCode;
import com.nspl.agingoptions.webUtil.BaseTest;
import com.nspl.agingoptions.webUtil.DataUtil;

public class LifeInsuranceTestCases extends BaseTest {

	@Test(priority = 1)
	public void FTC_016_PrimaryMemberLifeInsuranceSaveContinueLaterButton() {
		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectAllStateInsGroupFromInsuranceCompanyDD();
		lifeinsurance.selectHybridTypePolicy();
		String expectedPolicyNumValue = "PLCNUM98324";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "12-19-2010";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "11-23-2030";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "43534";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "87654";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "23456";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		lifeinsurance.openBeneficiaryInfoAccordian();
		lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveContinueLaterButton();
		common.waitUntilToasterMessageisSeen();
		lifeinsurance.clickAllStateInsEditIcon();
		DataUtil data = new DataUtil();
		util.holdOn(Duration.ofSeconds(5));
		Map<String, String> testData = data.getTestCaseData("Health_001");
		String spouseFirstName = testData.get("spouseFirstName");
		String lastName = testData.get("lastName");
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		util.holdOn(Duration.ofSeconds(3));
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(1));
		String actualBeneficiaryText = lifeinsurance.getBeneficiarySelectedText();

		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "Allstate Ins Group", "Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Hybrid", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");
		util.verifyActualExpectedText(actualBeneficiaryText, spouseFirstName + " " + lastName, "Death benefit");
		common.clickPreviousButton();
	}

	@Test(priority = 2)
	public void FTC_017_PrimaryMemberLifeInsuranceSaveAddAnotherButtonSameAsSpouse() {
		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		common.clickCopySameDataCheckbox();
		common.checkCopySameDataToSpouseCheckBox();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectChubbInaGroupFromInsuranceCompanyDD();
		lifeinsurance.selectHybridTypePolicy();
		String expectedPolicyNumValue = "POLICYNUMBER93849";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "11-24-2007";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "10-28-2026";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "443544";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "5656";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "78654";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		lifeinsurance.openBeneficiaryInfoAccordian();
		lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveAddAnotherButton();
		common.waitUntilToasterMessageisSeen();
		common.clickPreviousButton();
		common.clickSpouseToggleButton();
		util.holdOn(Duration.ofSeconds(5));
		lifeinsurance.clickChubbInaGroupEditIcon();
		DataUtil data = new DataUtil();
		Map<String, String> testData = data.getTestCaseData("Health_001");
		String spouseFirstName = testData.get("spouseFirstName");
		String lastName = testData.get("lastName");
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		util.holdOn(Duration.ofSeconds(3));
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(1));
		// String actualBeneficiaryText= lifeinsurance.getBeneficiarySelectedText();

		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "Chubb INA Group", "Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Hybrid", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");
		// util.verifyActualExpectedText(actualBeneficiaryText,spouseFirstName+"
		// "+lastName ,"Death benefit" );
		common.clickPreviousButton();
		common.clickPrimaryMemberToggleButton();
	}

	@Test(priority = 3)
	public void FTC_018_PrimaryMemberLifeInsuranceNextSpouseButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectOtherInsuranceCompany();
		String expectedOtherInsuranceCompanyValue = "Sk Health Insurance";
		healthIns.inputInsuranceCompanyOtherTextBoxValue(expectedOtherInsuranceCompanyValue);
		lifeinsurance.selectOtherTypePolicy();
		String expectedOtherTypePolicyValue = "Half Life";
		lifeinsurance.inputOtherTypePolicyValue(expectedOtherTypePolicyValue);
		String expectedPolicyNumValue = "POLICY9849348";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "11-24-2010";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "10-28-2029";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "9384";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "14321";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "87654";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		lifeinsurance.openBeneficiaryInfoAccordian();
		lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		lifeinsurance.clickNextLifeInsuranceButton();
		common.waitUntilToasterMessageisSeen();
		common.clickPrimaryMemberToggleButton();
		util.holdOn(Duration.ofSeconds(3));
		lifeinsurance.clickHalfLifeEditIcon();
		util.holdOn(Duration.ofSeconds(5));
		DataUtil data = new DataUtil();
		Map<String, String> testData = data.getTestCaseData("Health_001");
		String spouseFirstName = testData.get("spouseFirstName");
		String lastName = testData.get("lastName");
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualInsuranceCompanyOtherText = healthIns.getInsuranceCompanyOtherDescriptionInputText();
		String actualTypeOfPolicyOtherValue = lifeinsurance.getOtherTypeOfPolicyTextBoxInputValue();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		util.holdOn(Duration.ofSeconds(3));
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(1));
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "Other", "Insurance company");
		util.verifyActualExpectedText(actualInsuranceCompanyOtherText, expectedOtherInsuranceCompanyValue,
				"Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicyOtherValue, expectedOtherTypePolicyValue, "Type Of Policy");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Other", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");

	}

	@Test(priority = 4)
	public void FTC_019_SpouseLifeInsuranceSaveContinueLaterButton() {
		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		common.clickSpouseToggleButton();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectAllStateInsGroupFromInsuranceCompanyDD();
		lifeinsurance.selectHybridTypePolicy();
		String expectedPolicyNumValue = "PLCNUM98324";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "12-19-2010";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "11-23-2030";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "43534";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "87654";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "23456";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		// lifeinsurance.openBeneficiaryInfoAccordian();
		// lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveContinueLaterButton();
		common.waitUntilToasterMessageisSeen();
		lifeinsurance.clickAllStateInsEditIcon();
		DataUtil data = new DataUtil();
		// Map<String,String> testData= data.getTestCaseData("Health_001");
		// String spouseFirstName= testData.get("spouseFirstName");
		// String lastName= testData.get("lastName");
		util.holdOn(Duration.ofSeconds(3));
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		util.holdOn(Duration.ofSeconds(4));
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(3));
		String actualBeneficiaryText = lifeinsurance.getBeneficiarySelectedText();
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "Allstate Ins Group", "Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Hybrid", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");
		// util.verifyActualExpectedText(actualBeneficiaryText,spouseFirstName+"
		// "+lastName ,"Death benefit" );
		common.clickPreviousButton();
	}

	@Test(priority = 5)
	public void FTC_020_SpouseLifeInsuranceSaveAddAnotherButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		common.clickSpouseToggleButton();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectUSAAGroupFromInsuranceCompanyDD();
		lifeinsurance.selectHybridTypePolicy();
		String expectedPolicyNumValue = "PLCNUM98324";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "12-19-2010";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "11-23-2030";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "43534";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "87654";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "23456";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		// lifeinsurance.openBeneficiaryInfoAccordian();
		// lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveAddAnotherButton();
		common.waitUntilToasterMessageisSeen();
		common.clickPreviousButton();
		lifeinsurance.clickUsaaGroupEditIcon();
		DataUtil data = new DataUtil();
		// Map<String,String> testData= data.getTestCaseData("Health_001");
		// String spouseFirstName= testData.get("spouseFirstName");
		// String lastName= testData.get("lastName");
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		util.holdOn(Duration.ofSeconds(2));
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(1));
		String actualBeneficiaryText = lifeinsurance.getBeneficiarySelectedText();
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "USAA Group", "Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Hybrid", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");
		common.clickPreviousButton();

	}


	@Test(priority=6)
	public void FTC_021_SpouseLifeInsuranceNextLongTermCarePolicyButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		FiduciaryBeneficiaryPage fiduciary = new FiduciaryBeneficiaryPage(util);
		lpo.clickLegalSideBarLink();
		fiduciary.clickFiduciaryOrBeneficiaryLink();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToSpouseButton();
		fiduciary.checkFiduciaryBeneficiaryCheckBox();
		fiduciary.clickProceedToLivingWillDetailsButton();
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLifeInsuranceSidebarLink();
		common.clickSpouseToggleButton();
		LifeInsurance lifeinsurance = new LifeInsurance(util);
		lifeinsurance.clickAddPolicyButton();
		HealthInsurance healthIns = new HealthInsurance(util);
		healthIns.selectNationWideGroupFromInsuranceCompanyDD();
		lifeinsurance.selectHybridTypePolicy();
		String expectedPolicyNumValue = "PLCNUM98324";
		healthIns.inputPolicyNumber(expectedPolicyNumValue);
		String expectedPolicyStartDateValue = "12-19-2010";
		lifeinsurance.inputPolicyStartDate(expectedPolicyStartDateValue);
		String expectedPolicyEndDateValue = "11-23-2030";
		lifeinsurance.inputPolicyEndDate(expectedPolicyEndDateValue);
		lifeinsurance.openFinancialInfoAccordian();
		String expectedPremiumAmountValue = "43534";
		healthIns.inputPremiumAmount(expectedPremiumAmountValue);
		healthIns.selectQuaterlyPremiumFrequency();
		String expectedCashValue = "87654";
		lifeinsurance.inputCashValue(expectedCashValue);
		String expectedDeathBenfitValue = "23456";
		lifeinsurance.inputDeathBenefitValue(expectedDeathBenfitValue);
		// lifeinsurance.openBeneficiaryInfoAccordian();
		// lifeinsurance.selectSpouseAsBeneficiary();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		lifeinsurance.clickNextLongTermCarePolicyButton();
		common.waitUntilToasterMessageisSeen();
		util.holdOn(Duration.ofSeconds(2));
		assets.clickLifeInsuranceSidebarLink();
		util.holdOn(Duration.ofSeconds(2));
		common.clickSpouseToggleButton();
		lifeinsurance.clickNationwideGroupEditIcon();
		DataUtil data = new DataUtil();
		// Map<String,String> testData= data.getTestCaseData("Health_001");
		// String spouseFirstName= testData.get("spouseFirstName");
		// String lastName= testData.get("lastName");
		util.holdOn(Duration.ofSeconds(4));
		String actualInsuranceCompanySelectedText = healthIns.getInsuranceCompanySelectedText();
		String actualTypeOfPolicySelectedText = lifeinsurance.getTypeOfPolicySelectedText();
		String actualPolicyNumSelectedText = healthIns.getPolicyNumberInputText();
		String actualPolicyStartDate = lifeinsurance.getPolicyStartDate();
		String actualPolicyEndDate = lifeinsurance.getPolicyEndDate();
		lifeinsurance.openFinancialInfoAccordian();
		String actualPremiumAmountText = healthIns.getPremiumAmountInputText();
		String actualPremiumFrequncyAmount = healthIns.getPremiumFrequnecySelectedText();
		String actualCashValueText = lifeinsurance.getCashValueSelectedText();
		String actualDeathBenefitText = lifeinsurance.getDeathBenefitSelectedText();
		lifeinsurance.openBeneficiaryInfoAccordian();
		util.holdOn(Duration.ofSeconds(1));
		String actualBeneficiaryText = lifeinsurance.getBeneficiarySelectedText();
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText, "Nationwide Group", "Insurance company");
		util.verifyActualExpectedText(actualTypeOfPolicySelectedText, "Hybrid", "Type of policy");
		util.verifyActualExpectedText(actualPolicyNumSelectedText, expectedPolicyNumValue, "Policy number");
		util.verifyActualExpectedText(actualPolicyStartDate, expectedPolicyStartDateValue, "Policy start date");
		util.verifyActualExpectedText(actualPolicyEndDate, expectedPolicyEndDateValue, "Policy End date");
		util.verifyActualExpectedText(actualPremiumAmountText, expectedPremiumAmountValue, "Premium amount");
		util.verifyActualExpectedText(actualPremiumFrequncyAmount, "Quarterly", "Premium frequency");
		util.verifyActualExpectedText(actualCashValueText, expectedCashValue, "Cash value");
		util.verifyActualExpectedText(actualDeathBenefitText, expectedDeathBenfitValue, "Death benefit");
		common.clickPreviousButton();

	}

}
