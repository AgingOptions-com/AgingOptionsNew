package com.nspl.agingoptions.financepage.testcases;

import java.time.Duration;

import org.testng.annotations.Test;

import com.agingoptions.finance.LifeInsurance;
import com.agingoptions.finance.LongTermCarePolicy;
import com.agingoptions.health.HealthInsurance;
import com.agingoptions.lpolandingpage.LpoLandingPage;
import com.nspl.agingoptions.commoncode.AssetsCommonCode;
import com.nspl.agingoptions.commoncode.CommonCode;
import com.nspl.agingoptions.webUtil.BaseTest;

public class LongTermCarePolicyTestCases extends BaseTest {


	@Test(priority=1)
	public void  FTC_022_PrimaryMemberLongTermCarePolicySaveContinueLaterButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectHybridTypeOfPolicy();
		String expectedPolicyNumber="PLCNUM9348";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectNationWideGroupFromInsuranceCompanyDD();
		String expectedPolicyStartDate="11-12-2000";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="23498";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2020";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="3984";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="39843";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="9833";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="12";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="8";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationYesRadioButton();
		String expectedInflationPercentage="16";
		longTerm.inputInflationPercentage(expectedInflationPercentage);
		longTerm.clickSimpleRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveContinueLaterButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickNationwideGroupEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();

		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		String actualInflationPercentageText=	longTerm.getInflationPercentageInputText();
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Hybrid","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"Nationwide Group","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		util.verifyActualExpectedText(expectedInflationPercentage, actualInflationPercentageText, "Inflation Percentage");
		common.clickPreviousButton();

	}


	@Test(priority =2)
	public void  FTC_023_PrimaryMemberLongTermCarePolicySaveAddAnotherButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectTraditionalTypeOfPolicy();
		String expectedPolicyNumber="938439";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectUSAAGroupFromInsuranceCompanyDD();
		String expectedPolicyStartDate="11-19-2003";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="99876";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2018";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="9384";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="93847";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="92834";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="12";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="8";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationNoRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveAddAnotherButton();
		common.waitUntilToasterMessageisSeen();
		common.clickPreviousButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickUsaaGroupEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();
		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Traditional","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"USAA Group","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		common.clickPreviousButton();

	}

	@Test(priority =3)
	public void  FTC_024_PrimaryMemberLongTermCarePolicySaveProceedToSpouseButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectOtherTypeOfPolicy();
		String expectedOtherTypeOfPolicyValue="OTHER984394";
		longTerm.inputTypeOfPolicyOtherValue(expectedOtherTypeOfPolicyValue);
		String expectedPolicyNumber="938439";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectOtherInsuranceCompany();
		String insuranceProviderOtherValue="INSOTHER3849384";
		longTerm.inputInsuranceProviderOtherValue(insuranceProviderOtherValue);
		String expectedPolicyStartDate="11-19-2003";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="99876";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2018";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="9384";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="93847";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="92834";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="12";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="8";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationNoRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveAndProceedToSpouseBT();
		common.waitUntilToasterMessageisSeen();
		assets.clickLongTermCarePolicySideBarLink();
		common.clickPrimaryMemberToggleButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickOtherInsuranceProviderEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();
		util.holdOn(Duration.ofSeconds(2));
		String actualInsuranceProvderOtherValue=	longTerm.getInsuranceProviderOtherValue();
		String actualTypeOfPolicyOtherValue=	longTerm.getTypeOfPolicyOtherValue();
		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		util.holdOn(Duration.ofSeconds(7));
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Other","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"Other","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualInsuranceProvderOtherValue,expectedOtherTypeOfPolicyValue,"Type Of Policy Other");
		util.verifyActualExpectedText(actualTypeOfPolicyOtherValue,insuranceProviderOtherValue,"Insurance Provider Other");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		common.clickPreviousButton();

	}

	@Test(priority=4)
	public void  FTC_025_SpouseLongTermCarePolicySaveContinueLaterButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		common.clickSpouseToggleButton();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectHybridTypeOfPolicy();
		String expectedPolicyNumber="POLICYNUM983948";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectNationWideGroupFromInsuranceCompanyDD();
		String expectedPolicyStartDate="11-11-2009";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="89785";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2019";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="67454";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="86689";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="9889";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="11";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="3";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationYesRadioButton();
		String expectedInflationPercentage="10";
		longTerm.inputInflationPercentage(expectedInflationPercentage);
		longTerm.clickSimpleRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveContinueLaterButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickNationwideGroupEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();
		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		String actualInflationPercentageText=	longTerm.getInflationPercentageInputText();
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Hybrid","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"Nationwide Group","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		util.verifyActualExpectedText(expectedInflationPercentage, actualInflationPercentageText, "Inflation Percentage");
		common.clickPreviousButton();

	}

	@Test(priority=5)
	public void  FTC_026_SpouseLongTermCarePolicySaveAddAnotherButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		common.clickSpouseToggleButton();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectTraditionalTypeOfPolicy();
		String expectedPolicyNumber="456789";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectUSAAGroupFromInsuranceCompanyDD();
		String expectedPolicyStartDate="11-19-2004";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="99554";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2016";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="9392";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="93987";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="928345";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="11";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="7";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationNoRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		common.clickSaveAddAnotherButton();
		common.waitUntilToasterMessageisSeen();
		common.clickPreviousButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickUsaaGroupEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();
		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Traditional","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"USAA Group","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		common.clickPreviousButton();

	}

	@Test(priority = 6)
	public void  FTC_027_SpouseLongTermCarePolicySaveProceedToSpouseButton() {

		LpoLandingPage lpo = new LpoLandingPage(util);
		CommonCode common = new CommonCode(util);
		util.refreshPage();
		lpo.clickFinanceSideBarLink();
		AssetsCommonCode assets = new AssetsCommonCode(util);
		assets.clickAssetsSideBarLink();
		assets.clickLongTermCarePolicySideBarLink();
		common.clickSpouseToggleButton();
		assets.clickAddPolicyButton();
		HealthInsurance health=	new HealthInsurance(util);
		LongTermCarePolicy longTerm=	new LongTermCarePolicy(util);
		longTerm.selectOtherTypeOfPolicy();
		String expectedOtherTypeOfPolicyValue="9458457OTH";
		longTerm.inputTypeOfPolicyOtherValue(expectedOtherTypeOfPolicyValue);
		String expectedPolicyNumber="938439";
		health.inputPolicyNumber(expectedPolicyNumber);
		health.selectOtherInsuranceCompany();
		String insuranceProviderOtherValue="INS3849384";
		longTerm.inputInsuranceProviderOtherValue(insuranceProviderOtherValue);
		String expectedPolicyStartDate="11-19-2003";
		longTerm.inputPolicyStartDate(expectedPolicyStartDate);
		health.selectQuaterlyPremiumFrequency();
		String premiumAmountExpectedText="9348";
		health.inputPremiumAmount(premiumAmountExpectedText);
		String expectedPremiumIncreaseDate="11-12-2016";
		longTerm.inputWhenWasLastPremiumIncrease(expectedPremiumIncreaseDate);
		longTerm.openBenefitInfoAccordian();
		String expectedDailyBenefitAmount="45673";
		longTerm.inputDailyBenefitAmount(expectedDailyBenefitAmount);
		String expectedBenefitOtherThanAmount="12347";
		longTerm.inputDailyBenefitOtherThanNurseHomeAmount(expectedBenefitOtherThanAmount);
		String expectedLifeTimeBenefit="8764";
		longTerm.inputMaximumLifeTimeBenefit(expectedLifeTimeBenefit);
		String expectedNumberOfYearBenefit="11";
		longTerm.inputNumberOfYearBenefit(expectedNumberOfYearBenefit);
		String expectedEleminationPeriod="7";
		longTerm.inputEleminationPeriod(expectedEleminationPeriod);
		longTerm.openInflationProtectionAccordian();
		longTerm.clickDoesThePlanHaveInflationNoRadioButton();
		assets.openDocumentUploadAccoridian();
		assets.uploadFile();
		longTerm.clickSaveProceedToFutureExpectationButton();
		common.waitUntilToasterMessageisSeen();
		util.holdOn(Duration.ofSeconds(5));
		assets.clickLongTermCarePolicySideBarLink();
		common.clickSpouseToggleButton();
		LifeInsurance insurance=     new LifeInsurance(util);
		insurance.clickOtherTYpeOfPolicyEditIcon();
		String actualTypeOfPolicyText=		insurance.getTypeOfPolicySelectedText();
		String actualInsuranceCompanySelectedText=		health.getInsuranceCompanySelectedText();
		String acutalPolicyNumberInputText=	health.getPolicyNumberInputText();
		String actualPolicyStartDateText=	insurance.getPolicyStartDate();
		String actualPremiumFrequncyText=	health.getPremiumFrequnecySelectedText();
		String acutalPremiumAmountText=	health.getPremiumAmountInputText();
		String actualWhenWasThePremiumIncreaseText=	longTerm.getWhenWasTheLastPremiumIncreaseText();
		util.holdOn(Duration.ofSeconds(2));
		String actualInsuranceProvderOtherValue=	longTerm.getInsuranceProviderOtherValue();
		String actualTypeOfPolicyOtherValue=	longTerm.getTypeOfPolicyOtherValue();
		longTerm.openBenefitInfoAccordian();
		String acutalDailyBenefitAmount=	longTerm.getDailyBenefitAmountNursingHome();
		String acutalDailyBenefitOtherThanNursingHomeAmount=	longTerm.getDailyBenefitAmountOtherThanNursingHome();
		String acutalMaximumLifeTimeBenefitsText=	longTerm.getMaximumLifetimeBenefitsInputText();
		String acutalNumberOfYearInputText=	longTerm.getNumberOfYearInputText();
		String actualEleminationPeriodText=		longTerm.getEleminationPeriodInputText();
		longTerm.openInflationProtectionAccordian();
		util.holdOn(Duration.ofSeconds(7));
		util.verifyActualExpectedText(actualTypeOfPolicyText,"Other","Type Of Policy");
		util.verifyActualExpectedText(actualInsuranceCompanySelectedText,"Other","Insurance provider");
		util.verifyActualExpectedText(acutalPolicyNumberInputText,expectedPolicyNumber,"Policy Number");
		util.verifyActualExpectedText(expectedPolicyStartDate,actualPolicyStartDateText,"Policy Start Date");
		util.verifyActualExpectedText(actualPremiumFrequncyText,"Quaterly","Premium Frequency");
		util.verifyActualExpectedText(premiumAmountExpectedText,acutalPremiumAmountText,"Premium Amount");
		util.verifyActualExpectedText(actualInsuranceProvderOtherValue,expectedOtherTypeOfPolicyValue,"Type Of Policy Other");
		util.verifyActualExpectedText(actualTypeOfPolicyOtherValue,insuranceProviderOtherValue,"Insurance Provider Other");
		util.verifyActualExpectedText(actualWhenWasThePremiumIncreaseText,expectedPremiumIncreaseDate,"When was the last premium increased");
		util.verifyActualExpectedText(acutalDailyBenefitAmount,expectedDailyBenefitAmount,"Daily benefit amount-nursing home");
		util.verifyActualExpectedText(acutalDailyBenefitOtherThanNursingHomeAmount,expectedBenefitOtherThanAmount,"Daily benefit amount other than nurse home setting");
		util.verifyActualExpectedText(acutalMaximumLifeTimeBenefitsText,expectedLifeTimeBenefit,"Maximum lifetime benefits");
		util.verifyActualExpectedText(expectedNumberOfYearBenefit,acutalNumberOfYearInputText,"Number of years benefits will continue");
		util.verifyActualExpectedText(expectedEleminationPeriod, actualEleminationPeriodText, "Elimination period");
		common.clickPreviousButton();

	}


}
